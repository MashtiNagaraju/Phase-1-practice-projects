project1.ArithmeticCalculator


package assignment1;

import java.io.*;
import java.lang.*;
import java.lang.Math;
import java.util.Scanner;
public class ArithmeticCalculator {
	public static void main(String[] args)
	{
		double num1, num2;
		Scanner sc = new Scanner(System.in);
                System.out.println("Enter the numbers");
		num1 = sc.nextDouble();
                num2 = sc.nextDouble();
                System.out.println("Enter the operator (+,-,*,/)");
		char op = sc.next().charAt(0);
		double o = 0;
		switch (op) {
		case '+':
			o = num1 + num2;
			break;
		case '-':
			o = num1 - num2;
			break;
		case '*':
			o = num1 * num2;
			break;
		case '/':
                        o = num1 / num2;
			break;
		default:
			System.out.println("You enter wrong input");
			break;
		}
		System.out.println("The final result:");
		System.out.println();
		System.out.println(num1 + " " + op + " " + num2 + " = " + o);
	}
}










project 2.  LIS.java 

package javaproject1;
public class LIS {



    static int max_ref; // stores the LIS


    static int _lis(int arr[], int n)
    {
        // base case
        if (n == 1)
            return 1;

        // 'max_ending_here' is length of LIS ending with arr[n-1]
        int res, max_ending_here = 1;


        for (int i = 1; i < n; i++) {
            res = _lis(arr, i);
            if (arr[i - 1] < arr[n - 1] && res + 1 > max_ending_here)
                max_ending_here = res + 1;
        }

        // Compare max_ending_here with the overall max. And
        // update the overall max if needed
        if (max_ref < max_ending_here)
            max_ref = max_ending_here;

        // Return length of LIS ending with arr[n-1]
        return max_ending_here;
    }

    // The wrapper function for _lis()
    static int lis(int arr[], int n)
    {
        // The max variable holds the result
        max_ref = 1;

        // The function _lis() stores its result in max
        _lis(arr, n);

        // returns max
        return max_ref;
    }

    // driver program to test above functions
    public static void main(String args[])
    {
        int arr[] = { 1, 50, 41, 60 };
        int n = arr.length;
        System.out.println("Length of lis is "
                           + lis(arr, n) + "\n");
    }


}














project 3. bugfix.java 

package javaproject1;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;
public class bugfix {




	public static void main(String[] args) {
       //System.out.println("Hello World!");/
        System.out.println("\n******\n");
        System.out.println("\tWelcome to my Application\n");
        System.out.println("******");
        optionsSelection();

    }
    private static void optionsSelection() {
        String[] arr = {"1. I wish to review my expenditure",
                "2. I wish to add my expenditure",
                "3. I wish to delete my expenditure",
                "4. I wish to sort the expenditures",
                "5. I wish to search for a particular expenditure",
                "6. Close the application"
        };
        int[] arr1 = {1,2,3,4,5,6};
        int  slen = arr1.length;
        for(int i=0; i<slen;i++){
            System.out.println(arr[i]);
            // display the all the Strings mentioned in the String array
        }
        ArrayList<Integer> arrlist = new ArrayList<Integer>();
        ArrayList<Integer> expenses = new ArrayList<Integer>();
        expenses.add(5000);
        expenses.add(6000);
        expenses.add(50000);
        expenses.add(60000);
        expenses.add(500);
        expenses.addAll(arrlist);
        System.out.println("\nEnter your choice:\t");
        Scanner sc = new Scanner(System.in);
        int  options =  sc.nextInt();
        for(int j=1;j<=slen;j++){
            if(options==j){
                switch (options){
                    case 1:
                        System.out.println("Your saved expenses are listed below: \n");
                        System.out.println(expenses+"\n");
                        optionsSelection();
                        break;
                    case 2:
                        System.out.println("Enter the value to add your Expense: \n");
                        int value = sc.nextInt();
                        expenses.add(value);
                        System.out.println("Your value is updated\n");
                        expenses.addAll(arrlist);
                        System.out.println(expenses+"\n");
                        optionsSelection();

                        break;
                    case 3:
                        System.out.println("You are about the delete all your expenses! \nConfirm again by selecting the same option...\n");
                        int con_choice = sc.nextInt();
                        if(con_choice==options){
                               expenses.clear();
                            System.out.println(expenses+"\n");
                            System.out.println("All your expenses are erased!\n");
                        } else {
                            System.out.println("Oops... try again!");
                        }
                        optionsSelection();
                        break;
                    case 4:
                        sortExpenses(expenses);
                        optionsSelection();
                        break;
                    case 5:
                        searchExpenses(expenses);
                        optionsSelection();
                        break;
                    case 6:
                        closeApp();
                        break;
                    default:
                        System.out.println("You have made an invalid choice!");
                        break;
                }
            }
        }

    }
    private static void closeApp() {
        System.out.println("Closing your application... \nThank you!");
            }
    private static void searchExpenses(ArrayList<Integer> arrayList) {
        int leng = arrayList.size();
        System.out.println("Enter the expense you need to search:\t");
        //
        Scanner sc = new Scanner(System.in);
        int input = sc.nextInt();
        //Linear Search
        for(int i=0;i<leng;i++) {
        	if(arrayList.get(i)==input) {
        		System.out.println("Found the expense " + input + " at " + i + " position");
        	}
        }
    }
    private static void sortExpenses(ArrayList<Integer> arrayList) {
        int arrlength =  arrayList.size();
       //Complete the method. The expenses should be sorted in ascending order.

        Collections.sort(arrayList);
        System.out.println("Sorted expenses: ");
        for(Integer i: arrayList) {
        	System.out.print(i + " ");
        }

        System.out.println("\n");

    }


}











 project 4.  email.java 

package javaproject1;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class email {



	public static boolean isValidEmail(String email) 
	{
		   String regex = "^(.+)@(.+)$";
		 // STEP 1: initialize the Pattern object
	       Pattern pattern = Pattern.compile(regex);
	       Matcher matcher = pattern.matcher(email);
	       return matcher.matches();


	   }

	 public static void main(String[] args)
	 {
	       List<String> emails = new ArrayList<String>();
	       // STEP 2 :valid email addresses
	       emails.add("mahi@gmail.com");
	       emails.add("mahesh@babu.com");
	       emails.add("mahesh@babu.me.org");
	       //STEP 3:invalid email addresses
	       emails.add("mahesh.babu.com");
	       emails.add("mahesh..babu.com");
	       emails.add("mahesh.babu.com");

	       for (String value : emails) {
	           System.out.println("The Email address " + value + " is " + (isValidEmail(value) ? "valid" : "invalid"));
	       }

	       System.out.println("Enter any email address to check");
	       Scanner sc = new Scanner(System.in);
	       String input = sc.nextLine();
	       System.out.println("The Email address " + input + " is " + (isValidEmail(input) ? "valid" : "invalid"));

	   }
} 













 project 5 .filehanding.java 

package javaproject1;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.StringTokenizer;

public class filehanding {



	public static void main(String[] args) {
		 Scanner strInput = new Scanner(System.in);
	        String choice,cont = "y";        

	        while( cont.equalsIgnoreCase("y") ) {        	
	        	   System.out.println("\t\t Employee Information System\n\n");

		        System.out.println("1 ===> Add New Employee Record ");
		        System.out.println("2 ===> View All Employee Record ");	
		        System.out.println("3 ===> Delete Employee Record ");
		        System.out.println("4 ===> Search Specific Record ");
		        System.out.println("5 ===> Update Specific Record ");	        

		        System.out.print("\n\n");
		        System.out.println("Enter your choice: ");
		        choice = strInput.nextLine();

		        if( choice.equals("1") ) {
		        		try {
							AddRecord();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
		        } else if( choice.equals("2") ) {
		        		try {
							ViewAllRecord();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
		        } else if( choice.equals("3") ) {
		        		try {
							DeleteRecordByID();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
		        }	else if( choice.equals("4") ) {
		        		try {
							SearchRecordbyID();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
		        }	else if( choice.equals("5") ) {
		        		try {
							updateRecordbyID();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
		        }	

		        System.out.println("Do you want to continue? Y/N");
		        cont = strInput.nextLine();

	        }

	}

	  public static void AddRecord() throws IOException {

  		BufferedWriter bw = new BufferedWriter( new FileWriter("records.txt",true) );
  		Scanner strInput = new Scanner(System.in);

  		String ID, name, age, addr;

  		System.out.print("Enter the Employee ID: ");
  		ID = strInput.nextLine();
  		System.out.print("Enter the Employee Name: ");
  		name = strInput.nextLine();
  		System.out.print("Enter the Employee Age: ");
  		age = strInput.nextLine();
  		System.out.print("Enter the Employee Address: ");
  		addr = strInput.nextLine();    		

  		bw.write(ID+","+name+","+age+","+addr);
  		bw.flush();
  		bw.newLine();
  		bw.close();		

  }





	public static void ViewAllRecord() throws IOException {
	    	BufferedReader br = new BufferedReader( new FileReader("records.txt") );

	    	String record;

	    	System.out.println(" ------------------------------------------------------------- ");
	    	System.out.println("|	ID		Name 				Age			Address 		  |");
	    	System.out.println(" ------------------------------------------------------------- ");

	    	while( ( record = br.readLine() ) != null ) {

	    		StringTokenizer st = new StringTokenizer(record,",");

	    		System.out.println("|	"+st.nextToken()+"	"+st.nextToken()+" 		"+st.nextToken()+"			"+st.nextToken()+"      |");

	    	}

	    	System.out.println("|	                                            	          |");
	    	System.out.println(" ------------------------------------------------------------- ");
	    	br.close();    		

	    }



	public static void DeleteRecordByID() throws IOException {
	    		Scanner strInput =  new Scanner(System.in);
	    		String ID, record;


	    		File tempDB = new File("records_temp.txt");
	    		File db = new File("records.txt");


	    		BufferedReader br = new BufferedReader( new FileReader( db ) );
	    		BufferedWriter bw = new BufferedWriter( new FileWriter( tempDB ) );


	    		System.out.println("\t\t Delete Employee Record\n");

	    		System.out.println("Enter the Employee ID: ");
	    		ID =  strInput.nextLine();


	    		while( ( record = br.readLine() ) != null ) {


	    			if( record.contains(ID) ) 
	    				continue;

	    			bw.write(record);
	    			bw.flush();
	    			bw.newLine();

	    		}

	    		br.close();
	    		bw.close();

	    		db.delete();

	    		tempDB.renameTo(db);

	    }


	public static void SearchRecordbyID() throws IOException {
	    		String ID,record;
	    		Scanner strInput = new Scanner(System.in);

	    		BufferedReader br = new BufferedReader( new FileReader("records.txt") );

	    		System.out.println("\t\t Search Employee Record\n");


	    		System.out.println("Enter the Employee ID: ");
	    		ID = strInput.nextLine();

	    		System.out.println(" ------------------------------------------------------------- ");
	    		System.out.println("|	ID		Name 				Age			Address 		  |");
	    		System.out.println(" ------------------------------------------------------------- ");

	    		while( ( record = br.readLine() ) != null ) {

	    			StringTokenizer st = new StringTokenizer(record,",");
	    			if( record.contains(ID) ) {
	    				System.out.println("|	"+st.nextToken()+"	"+st.nextToken()+" 		"+st.nextToken()+"			"+st.nextToken()+"      |");
	    			}



	    		}

	    		System.out.println("|	                                            	          |");
	    		System.out.println(" ------------------------------------------------------------- ");

	    		br.close();



	    }


	public static void updateRecordbyID() throws IOException {
	    		String newName, newAge, newAddr, record, ID,record2;

	    		File db = new File("records.txt");
	    		File tempDB = new File("records_temp.txt");

	    		BufferedReader br = new BufferedReader( new FileReader(db) );
	    		BufferedWriter bw = new BufferedWriter( new FileWriter(tempDB) );

	    		Scanner strInput = new Scanner(System.in);

	    		System.out.println("\t\t Update Employee Record\n\n");   
			/**/		
				System.out.println("Enter the Employee ID: ");
		    		ID = strInput.nextLine();	    		
		    		System.out.println(" ------------------------------------------------------------- ");
		    		System.out.println("|	ID		Name 				Age			Address 		  |");
		    		System.out.println(" ------------------------------------------------------------- ");

		    		while( ( record = br.readLine() ) != null ) {

		    			StringTokenizer st = new StringTokenizer(record,",");
		    			if( record.contains(ID) ) {
		    				System.out.println("|	"+st.nextToken()+"	"+st.nextToken()+" 		"+st.nextToken()+"			"+st.nextToken()+"      |");
		    			}

		    		}	    		
		    		System.out.println("|	                                            	          |");
		    		System.out.println(" ------------------------------------------------------------- ");

		    	br.close();
			/**/    	   
	    		System.out.println("Enter the new Name: ");

	    		newName = strInput.nextLine();    		
	    		System.out.println("Enter the new Age: ");
	    		newAge = strInput.nextLine();  
	    		System.out.println("Enter the new Address: ");
	    		newAddr = strInput.nextLine();  

	    		BufferedReader br2 = new BufferedReader( new FileReader(db) );

	    		while( (record2 = br2.readLine() ) != null ) {    			
	    			if(record2.contains(ID)) {
	    				bw.write(ID+","+newName+","+newAge+","+newAddr);
	    			} else {

	    				bw.write(record2);	
	    			}    			
	    			bw.flush();
	    			bw.newLine();
	    		}

	    		bw.close();
	    		br2.close();    		
	    		db.delete();    		
	    		boolean success = tempDB.renameTo(db);    		
	    		System.out.println(success);    		

	    }
